// Match Data is recorded from Hylo Open 2021 and YONES-SUNRISE India Open 2022
//       *****
// <------RHS------><-----LHS------>
//        Player2: Lakshya Sen
// +----+----------+----------+----+
// | 13 |    11    |    12    | 13 | Back
// |----+----------+----------+----|
// |    |          |          |    |
// |    |          |          |    |
// | 13 |    9     |    10    | 13 | Mid
// |    |          |          |    |
// |    |          |          |    |
// |----+----------+----------+----|
// | 13 |    7     |    8     | 13 | Front
// +===============================+ Net
// | 13 |    5     |    6     | 13 | 
// |----+----------+----------+----| Service Line
// |    |          |          |    |
// |    |          |          |    |
// | 13 |    3     |    4     | 13 |
// |    |          |          |    |
// |    |          |          |    |
// |----+----------+----------+----|
// | 13 |    1     |    2     | 13 |
// +----+----------+----------+----+ Baseline
//        Player1: Loh Kean Yew
// <------LHS------><-----RHS------>
//
//       *****

#import "PAT.Math";
#define DEF_MATCH_POINT 2;
#define MAX_POINT 3;
#define FIRST_TO 1;

enum{player1, player2, na};
enum{ply1_RHS, ply1_LHS, ply2_RHS, ply2_LHS}; // Serve position
enum{ply1_match_point, ply2_match_point, deuce, normal}; // Game State 

var turn = na; // Serve turn;
var won = na;
var lky_score = 0;
var ls_score = 0;
var shuttlecock = 13;
var game_state = normal;
var games_won[2];
var p1FatigueLevel = 0;
var p2FatigueLevel = 0;

Game = WhoServe1st; (Player1Serve [] Player2Serve);

WhoServe1st = []i:{ply1_RHS,ply2_RHS}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == ply1_RHS]LKYReady_RHS -> Ply1_Serve_RHS [] [won == na && turn == ply1_LHS] LKYReady_LHS -> Ply1_Serve_LHS;
Player2Serve = [won == na && turn == ply2_RHS]LSReady_RHS -> Ply2_Serve_RHS [] [won == na && turn == ply2_LHS] LSReady_LHS -> Ply2_Serve_LHS;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

// Rally End Events 
Ply1_Error = {
	ls_score++;
	p1FatigueLevel++;
	p2FatigueLevel++;
	if (ls_score == 11 && lky_score < 11) {
		p1FatigueLevel = call(Max, p1FatigueLevel - 3, 0);
		p2FatigueLevel = call(Max, p2FatigueLevel - 3, 0);
	}
	if (game_state == ply2_match_point || ls_score == MAX_POINT) {
		games_won[player2]++;
		if (games_won[player2] == FIRST_TO) {won = player2; p1FatigueLevel = 0; p2FatigueLevel = 0;}
		else {lky_score = 0; ls_score = 0; turn = ply2_RHS; game_state = normal;}
	}
	else {
		if (game_state == ply1_match_point && ls_score == lky_score) {game_state = deuce}
		else if (ls_score == DEF_MATCH_POINT || game_state == deuce) {game_state = ply2_match_point}
			turn = (ls_score%2)+2;
		}
} -> NextPt;
			
Ply2_Error = {
	lky_score++;
	if (lky_score == 11 && ls_score < 11) {
		p1FatigueLevel = p1FatigueLevel - 3;
		p2FatigueLevel = p2FatigueLevel - 3;
	}
	if (game_state == ply1_match_point || lky_score == MAX_POINT) {
		games_won[player1]++;
		if (games_won[player1] == FIRST_TO) {won = player1; p1FatigueLevel = 0; p2FatigueLevel = 0;}
		else {lky_score = 0; ls_score = 0; turn = ply1_RHS; game_state = normal;}
	}
	else {
		if (game_state == ply2_match_point && ls_score == lky_score) {game_state = deuce}
		else if (lky_score == DEF_MATCH_POINT || game_state == deuce) {game_state = ply1_match_point}
			turn = (lky_score%2);
		}
} -> NextPt;

//Service Events
// player 1 serves at position 4
Ply1_Serve_RHS = pcase {
			6: ServeHigh_in{shuttlecock = 11} -> Ply2_back_stroke_RHS  
			30: ServeLow_in{shuttlecock = 9} -> Ply2_mid_stroke_RHS
			2: Serve_err{shuttlecock = 13} -> Ply1_Error
			};

// player 1 serves at position 3
Ply1_Serve_LHS = pcase{
			4: ServeHigh_in{shuttlecock = 12} -> Ply2_back_stroke_LHS 
			29: ServeLow_in{shuttlecock = 10} -> Ply2_mid_stroke_LHS
			1: Serve_err{shuttlecock = 13} -> Ply1_Error
			};
			

// player 2 serves at position 9
Ply2_Serve_RHS = pcase {                             
			7: ServeHigh_in{shuttlecock = 2} -> Ply1_back_stroke_RHS  
			30: ServeLow_in{shuttlecock = 4} -> Ply1_mid_stroke_RHS
			2: Serve_err{shuttlecock = 13} -> Ply2_Error 
			};

// player 2 serves at position 10
Ply2_Serve_LHS = pcase {                             
			6: ServeHigh_in{shuttlecock = 1} -> Ply1_back_stroke_LHS  
			29: ServeLow_in{shuttlecock = 3} -> Ply1_mid_stroke_LHS
			1: Serve_err{shuttlecock = 13} -> Ply2_Error
			};

// Back Stroke Events
// player 1 receives at position 2
Ply1_back_stroke_RHS = pcase { 
			13: Lob_straight{shuttlecock = 12} -> Ply2_back_stroke_LHS
			7: Lob_cross{shuttlecock = 11} -> Ply2_back_stroke_RHS
			9: Drop_straight{shuttlecock = 8} -> Ply2_front_stroke_LHS
			11: Drop_cross{shuttlecock = 7} -> Ply2_front_stroke_RHS
			28: Smash_straight{shuttlecock = 10} -> Ply2_mid_stroke_LHS
			21: Smash_cross{shuttlecock = 9} -> Ply2_mid_stroke_RHS
			8: Error {shuttlecock = 13} -> Ply1_Error
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error       		                                                            
			}; 

// player 1 receives at position 1
Ply1_back_stroke_LHS = pcase { 
			15: Lob_straight{shuttlecock = 11} -> Ply2_back_stroke_RHS
			18: Lob_cross{shuttlecock = 12} -> Ply2_back_stroke_LHS
			7: Drop_straight{shuttlecock = 7} -> Ply2_front_stroke_RHS
			18: Drop_cross{shuttlecock = 8} -> Ply2_front_stroke_LHS
			52: Smash_straight{shuttlecock = 9} -> Ply2_mid_stroke_RHS
			25: Smash_cross{shuttlecock = 10} -> Ply2_mid_stroke_LHS
			7: Error {shuttlecock = 13} -> Ply1_Error
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error    		                                                            
			};

// player 2 receives at position 11
Ply2_back_stroke_RHS = pcase { 
			8: Lob_straight{shuttlecock = 1} -> Ply1_back_stroke_LHS
			6: Lob_cross{shuttlecock = 2} -> Ply1_back_stroke_RHS
			4: Drop_straight{shuttlecock = 5} -> Ply1_front_stroke_LHS
			15: Drop_cross{shuttlecock = 6} -> Ply1_front_stroke_RHS
			35: Smash_straight{shuttlecock = 3} -> Ply1_mid_stroke_LHS
			24: Smash_cross{shuttlecock = 4} -> Ply1_mid_stroke_RHS
			4: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error  		                                                            
			};

// player 2 receives at position 12
Ply2_back_stroke_LHS = pcase { 
			23: Lob_straight{shuttlecock = 2} -> Ply1_back_stroke_RHS
			15: Lob_cross{shuttlecock = 1} -> Ply1_back_stroke_LHS
			1: Drop_straight{shuttlecock = 6} -> Ply1_front_stroke_RHS
			10: Drop_cross{shuttlecock = 5} -> Ply1_front_stroke_LHS
			54: Smash_straight{shuttlecock = 4} -> Ply1_mid_stroke_RHS
			30: Smash_cross{shuttlecock = 3} -> Ply1_mid_stroke_LHS
			11: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error     		                                                            
			};

// Mid Stroke Events
// player 1 receives at position 4
Ply1_mid_stroke_RHS = pcase { 
			62: Low_straight{shuttlecock = 8} -> Ply2_front_stroke_LHS
			20: Low_cross{shuttlecock = 7} -> Ply2_front_stroke_RHS
			17: High_straight{shuttlecock = 12} -> Ply2_back_stroke_LHS
			6: High_cross{shuttlecock = 11} -> Ply2_back_stroke_RHS
			52: Push_straight{shuttlecock = 10} -> Ply2_mid_stroke_LHS
			35: Push_cross{shuttlecock = 9} -> Ply2_mid_stroke_RHS
			22: Error {shuttlecock = 13} -> Ply1_Error
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error      		                                                            
			};

// player 1 receives at position 3
Ply1_mid_stroke_LHS = pcase { 
			63: Low_straight{shuttlecock = 7} -> Ply2_front_stroke_RHS
			11: Low_cross{shuttlecock = 8} -> Ply2_front_stroke_LHS
			21: High_straight{shuttlecock = 11} -> Ply2_back_stroke_RHS
			8: High_cross{shuttlecock = 12} -> Ply2_back_stroke_LHS
			59: Push_straight{shuttlecock = 9} -> Ply2_mid_stroke_RHS
			49: Push_cross{shuttlecock = 10} -> Ply2_mid_stroke_LHS
			13: Error {shuttlecock = 13} -> Ply1_Error      	
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error	                                                            
			};

// player 2 receives at position 9
Ply2_mid_stroke_RHS = pcase { 
			39: Low_straight{shuttlecock = 5} -> Ply1_front_stroke_LHS
			18: Low_cross{shuttlecock = 6} -> Ply1_front_stroke_RHS
			13: High_straight{shuttlecock = 1} -> Ply1_back_stroke_LHS
			7: High_cross{shuttlecock = 2} -> Ply1_back_stroke_RHS
			54: Push_straight{shuttlecock = 3} -> Ply1_mid_stroke_LHS
			55: Push_cross{shuttlecock = 4} -> Ply1_mid_stroke_RHS
			23: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error      		                                                            
			};

// player 2 receives at position 10
Ply2_mid_stroke_LHS = pcase { 
			53: Low_straight{shuttlecock = 6} -> Ply1_front_stroke_RHS
			20: Low_cross{shuttlecock = 5} -> Ply1_front_stroke_LHS
			9: High_straight{shuttlecock = 2} -> Ply1_back_stroke_RHS
			16: High_cross{shuttlecock = 1} -> Ply1_back_stroke_LHS
			39: Push_straight{shuttlecock = 4} -> Ply1_mid_stroke_RHS
			55: Push_cross{shuttlecock = 3} -> Ply1_mid_stroke_LHS
			11: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error      		                                                            
			};
	
// Front Stroke Events
// player 1 receives at position 6
Ply1_front_stroke_RHS = pcase { 
			43: Lift_straight{shuttlecock = 12} -> Ply2_back_stroke_LHS
			33: Lift_cross{shuttlecock = 11} -> Ply2_back_stroke_RHS
			48: Net_straight{shuttlecock = 8} -> Ply2_front_stroke_LHS
			14: Net_cross{shuttlecock = 7} -> Ply2_front_stroke_RHS
			11: Error {shuttlecock = 13} -> Ply1_Error
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error      		                                                            
			};
			
// player 1 receives at position 5
Ply1_front_stroke_LHS = pcase { 
			25: Lift_straight{shuttlecock = 11} -> Ply2_back_stroke_RHS
			52: Lift_cross{shuttlecock = 12} -> Ply2_back_stroke_LHS
			49: Net_straight{shuttlecock = 7} -> Ply2_front_stroke_RHS
			14: Net_cross{shuttlecock = 8} -> Ply2_front_stroke_LHS
			5: Error {shuttlecock = 13} -> Ply1_Error
			p1FatigueLevel / 30: Error {shuttlecock = 13} -> Ply1_Error      		                                                            
			};

// player 2 receives at position 7
Ply2_front_stroke_RHS = pcase { 
			56: Lift_straight{shuttlecock = 1} -> Ply1_back_stroke_LHS
			27: Lift_cross{shuttlecock = 2} -> Ply1_back_stroke_RHS
			58: Net_straight{shuttlecock = 5} -> Ply1_front_stroke_LHS
			12: Net_cross{shuttlecock = 6} -> Ply1_front_stroke_RHS
			8: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error  		                                                            
			};

// player 2 receives at position 8
Ply2_front_stroke_LHS = pcase { 
			28: Lift_straight{shuttlecock = 2} -> Ply1_back_stroke_RHS
			60: Lift_cross{shuttlecock = 1} -> Ply1_back_stroke_LHS
			49: Net_straight{shuttlecock = 6} -> Ply1_front_stroke_RHS
			12: Net_cross{shuttlecock = 5} -> Ply1_front_stroke_LHS
			15: Error {shuttlecock = 13} -> Ply2_Error
			p2FatigueLevel / 30: Error {shuttlecock = 13} -> Ply2_Error      		                                                            
			};
	                                                            

#define LKYWin won == player1;
#define LSWin won == player2;
#assert Game reaches LKYWin with prob;
#assert Game reaches LSWin with prob;
